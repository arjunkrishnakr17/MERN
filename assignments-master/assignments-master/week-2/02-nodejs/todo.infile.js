/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)
  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
    - For any other route not defined in the server return 404
  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express=require("express");
const app=new express();
let fs=require("fs");
const bodyParser=require("body-parser");
app.use(bodyParser.json());
//   1.GET /todos - Retrieve all todo items
//   Description: Returns a list of all todo items.
//   Response: 200 OK with an array of todo items in JSON format.
//   Example: GET http://localhost:3000/todos

app.get("/todos",function(req,res)
{
    fs.readFile("todo.json","utf-8",function(err,data)
{
    let datas=JSON.parse(data);
    res.status(200).send(datas);
})
})

// 2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123

app.get("/todos/:id",function(req,res)
{
    let target_id=parseInt(req.params.id);
    fs.readFile("todo.json","utf-8",function(err,data)
{
    if (err)
    {
        throw new Error("error");
    }
    else{
        let datas=JSON.parse(data);
        let flag=false;
        for (let i=0;i<datas.length;i++)
        {
            if (datas[i].id==target_id)
            {
                res.status(200).send(datas[i]);
                flag=true
            }
        }
        if(!flag)
        {
            res.send("item not found");
        }
    }
})
})

// 3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
function generateUniqueId()
{
    return Math.floor(Math.random() * 1000000)
}
app.post("/todos",function(req,res)
{
    let datas=[]
    todo=req.body;
    fs.readFile("todo.json","utf-8",function(err,data)
{
    if (err)
    {
        throw new Error("error");
    }
    else{
        datas=JSON.parse(data);
    }
    datas.push({
        "id":generateUniqueId(),
        "title":todo.title,
        "completed":todo.completed,
        "description":todo.description
    })
    fs.writeFile("todo.json",JSON.stringify(datas),function(err)
    {
        if(err)
        {
            throw new Error("error")
        }
    })
    res.status(200).send("todo updated");
    })
})

// 4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }

app.put("/todos/:id",function(req,res)
{
    let target_id=req.params.id;
    updated_todo=req.body;
    let datas=[]
    fs.readFile("todo.json","utf-8",function(err,data)
{
    if (err)
    {
        throw new Error("error");
    }
    else{
        datas=JSON.parse(data);
        let flag=false;
        for (let i=0;i<datas.length;i++)
        {
            if (datas[i].id==target_id)
            {
                datas[i].title=updated_todo.title;
                datas[i].completed=updated_todo.completed;
                flag=true
                
            }
        }
        if(!flag)
        {
            res.send("item not found");
        }
    }
    fs.writeFile("todo.json",JSON.stringify(datas),function(err)
    {
        if(err)
        {
            throw new Error("error")
        }
    })
    res.status(200).send("todo updated");
    })
    
})
// 5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

//     - For any other route not defined in the server return 404

app.delete("/todos/:id",function(req,res)
{
  let target_id=parseInt(req.params.id);
  let datas=[]
  fs.readFile("todo.json","utf-8",function(err,data)
{
    if (err)
    {
        throw new Error("error");
    }
    else{
        datas=JSON.parse(data);
        let flag=false;
        for (let i=0;i<datas.length;i++)
        {
            if (datas[i].id===target_id)
            {
                datas.splice(i,1);
                flag=true
                fs.writeFile("todo.json",JSON.stringify(datas),function(err)
            {
                if(err)
                {
                    throw new Error("error");
                }
            })
                res.status(200).send("ite delted");
            }
        }
        if(!flag)
        {
            res.send("item not found");
        }
        }
})

})

app.listen(3000);


