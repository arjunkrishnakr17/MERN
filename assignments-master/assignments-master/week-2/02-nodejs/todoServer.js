/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());
// 1.GET /todos - Retrieve all todo items
//   Description: Returns a list of all todo items.
//   Response: 200 OK with an array of todo items in JSON format.
//   Example: GET http://localhost:3000/todos

// todos=[{"id":-1,"title": "Buy groceries", "completed": false, description: "I should buy groceries"}]
todos=[];

app.get("/todos",function(req,res)
{
res.status(200).json(todos);
})

let counter=0
function generateUniqueId()
{
  counter+=1
  return counter;
}

// 2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123
app.get("/todos/:id",function(req,res)
{
  let target=parseInt(req.params.id);
  let flag=false;
  for (let i=0;i<todos.length;i++)
  {
    if (todos[i].id==target)
    {
      flag=true;
      res.status(200).json(todos[i]);
    }
  }
  if(!flag)
  {
  res.status(404).send("Not Found")
  }
})

// 3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

app.post("/todos",function(req,res)
{
  // let new_todo=req.body
  // console.log(new_todo);
  // new_id=generateUniqueId();
  // new_todo.id=new_id;
  // todos.push(new_todo)
  // console.log(todos)
  // res.status(200).json({"id":new_todo.id})


  const newTodo = {
    id: generateUniqueId(), // unique random id
    title: req.body.title,
    description: req.body.description
  };
  todos.push(newTodo);
  res.status(201).json(newTodo);
});

// 4. PUT /todos/:id - Update an existing todo item by ID
// Description: Updates an existing todo item identified by its ID.
// Request Body: JSON object representing the updated todo item.
// Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
// Example: PUT http://localhost:3000/todos/123
// Request Body: { "title": "Buy groceries", "completed": true }

app.put("/todos/:id",function(req,res)
{
  console.log("hello arjun");
  let updated_todo=req.body;
  let new_id=parseInt(req.params.id);
  let flag=false
  for (let i=0;i<todos.length;i++)
  {
    if (todos[i].id==new_id)
    {
      todos[i].title=updated_todo.title;
      todos[i].completed=updated_todo.completed;
      console.log(todos)
      flag=true
      res.status(200).send("item found and updated");
    }
  }
  if(!flag)
  {
  res.status(404).send("item not found");
  }
})

// 5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

//     - For any other route not defined in the server return 404

app.delete("/todos/:id",function(req,res)
{
  let target_id=req.params.id;
  let flag=false;
  for(let i=0;i<todos.length;i++)
  {
    if (todos[i].id==target_id)
    {
      todos.splice(i,1);
      flag=true
      res.status(200).send("item found and deleted")
    }

  }
  if (!flag)
  {
    res.status(404).send("item not found");
  }
})
module.exports = app;

